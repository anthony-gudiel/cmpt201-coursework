#define _DEFAULT_SOURCE
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define BUF_SIZE 256
#define EXTRA_SIZE 256

struct header {
  uint64_t size;
  struct header *next;
};

void *increase_heap_size(intptr_t size) {
  void *new_brk = sbrk(size);

  if (new_brk == (void *)-1) {
    perror("sbrk failed");
  }

  return new_brk;
}

struct header *initialize_block(char *block_ptr, bool first) {
  struct header *my_block = (struct header *)block_ptr;
  my_block->size = 128;
  if (first) {
    my_block->next = NULL;
    memset(block_ptr + sizeof(struct header), 0, 128 - sizeof(struct header));
  } else {
    my_block->next = (struct header *)(block_ptr - 128);
    memset(block_ptr + sizeof(struct header), 1, 128 - sizeof(struct header));
  }

  return my_block;
}

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    perror("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  void *first_block_pointer = increase_heap_size(EXTRA_SIZE);
  struct header *first_block = initialize_block(first_block_pointer, true);
  void *second_block_pointer = first_block_pointer + 128;
  struct header *second_block = initialize_block(second_block_pointer, false);

  print_out("First block address: %p\n", &first_block_pointer, sizeof(void *));
  print_out("Second block address: %p\n", &second_block_pointer,
            sizeof(void *));
  print_out("First block size: %lu\n", &first_block->size, sizeof(uint64_t));
  print_out("First block next: %p\n", &first_block->next, sizeof(void *));
  print_out("Second block size: %lu\n", &second_block->size, sizeof(uint64_t));
  print_out("Second block next: %p\n", &second_block->next, sizeof(void *));

  for (size_t i = 0; i < 128 - sizeof(struct header); i++) {
    uint64_t byte = *((unsigned char *)first_block + sizeof(struct header) + i);
    print_out("%02x ", &byte, sizeof(uint64_t));
  }

  for (size_t i = 0; i < 128 - sizeof(struct header); i++) {
    uint64_t byte = *((unsigned char *)second_block + sizeof(struct header) + i);
    print_out("%02x ", &byte, sizeof(uint64_t));
  }
}
