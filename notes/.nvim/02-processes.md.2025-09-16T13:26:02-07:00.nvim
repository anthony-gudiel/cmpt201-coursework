## Processes

- **Program**: compiled executable file
- **Process**: a running program
- The CPU can execute instructions from memory
    - Therefore a program must be in memory to run
- To begin executing a program, the OS will allocate space in memory for the program to run
    - OS neatly organizes everything before executing the program and starting the process
- ***syscalls*** can be used to control processes
    - Core syscalls include: **fork()**, **exec()**, **wait()**
- ***man*** page section numbers: used when we need to pick between two things of the same name
    - man 3 <name> will bring you to the c standard library

### Making a New Process

- Changing a variable's value in one process does not affect any variables in other processes
    - Isolated memory spaces
    - Pointers in one process cannot access the memory of the other
    - Even if the same address is referenced
    - Unless OS explicitly gives permission to share addresses
- The initial process is called the parent process
- The parent wants to make a child process
    - The parent will call ***fork()*** to have the OS start a new process
    - fork() is a syscall
- fork() creates a child process that is an identical copy of the calling process
    - It is called once, but it returns twice, the new process being the child
- For the parent, fork() returns the process ID of the child (knows the child)
- For the child, fork() returns 0
    - However, children can call ***ppid()*** to find their parent
- The parent and the child are the same program
